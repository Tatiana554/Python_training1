                    # Generated by Selenium IDE
# конструкторы импорт указывают какие используются классы из внешних библиотек ↓
import pytest
import json
from model.group import Group
from fixture.application import Application # импорт класса из папки для запуски браузера
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities




  # тестовые МЕТОДЫ ↓ созданные через refactor, они позволяютя сгруппировать и скоратить тестовый сценарий (шаги)
def test_add_group(app): # это объект созданый фикстурой
    old_groups = app.group.get_group_list()  # сохранение старого списка групп
    # Создание объекта типа Group ↓ ( в скобках это параметры объекта передаваемые в его конструктор в папке group)
    # и поскольку объект Group в отдельном файле group, вначале этого файла делается импорт
    group = Group(name ="группа новая", header ="444", footer ="555")
    app.group.create (group)
    new_groups = app.group.get_group_list()  # получаем новый список групп после содания группы
    assert len(old_groups) + 1 == len(new_groups)  # сравнение размера старого списка групп с новым; истиный список групп == длине нового списка
    # добавляем переменную group в список old_groups
    old_groups.append(group)
    # сравнение новогосписка групп со страым списком
    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)

  # ВТОРОЙ СЦЕНАРИЙ (из сгруппированых методов) с пустыми значениями в create_group
def test_add_empty_group(app):
    old_groups = app.group.get_group_list()
    group = (Group(name="", header="", footer=""))
    app.group.create(group)
    new_groups = app.group.get_group_list()  # новый список групп
    assert len(old_groups) +1 == len(new_groups)
    old_groups.append(group)
    # сравнение новогосписка групп со страым списком
    assert sorted(old_groups, key=Group.id_or_max) == sorted(new_groups, key=Group.id_or_max)





  
