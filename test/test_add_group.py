                    # Generated by Selenium IDE
# конструкторы импорт указывают какие используются классы из внешних библиотек ↓
import pytest
import json
from model.group import Group # импортирвание класса из другой папки group
from fixture.application import Application # импорт класса из папки для запуски браузера
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

@pytest.fixture # метка превращает функцию в инициализатор фикстуры
def app(request):  # эта функция инициализиует фикстуру
    fixture = Application() # эта функция будет создаваь фикстуру, то есть объект Application
    request.addfinalizer(fixture.destroy) # параметр request c методом addfinalizer (внутри функция для разрушения фикстуы
    # ↑ distroy эта функция которая передается в качестве параметра из папки application
    return fixture  # возвращает фикстуру

# class Testaddgroup(): # всё ниже это методы  класса Testaddgroup
  # метод это функция которая находится внутри класса
  # у такой функции всегда должен быть спец параметр self - это объект в котором вызывается метод
# def setup_method(self, method): # функция инициализации, подготовки, она выполняется перед тестовым методом

# self.app = Application () # запуск браузера из метода (из папки)

  
# def teardown_method(self, method): # функция завершения которая выполняется после тестового метода
# self.app.destroy() # метод для закрытия браузера из функции application


  # тестовые МЕТОДЫ ↓ созданные через refactor, они позволяютя сгруппировать и скоратить тестовый сценарий (шаги)
def test_add_group(app): # это объект созданый фикстурой
    # ↓ в методе передаются явные значения параметров username и password
    # эти параметры были созданы в несгруппированных методах, конкретно в login
    # добавляется app т.к. эты функция  обращается к функции application
    app.session.login(username ="admin",password ="secret")
    # ↑ добавлен session потомучто функция раскрыта в помощнике session
    # Создание объекта типа Group ↓ ( в скобках это параметры объекта передаваемые в его конструктор в папке group)
    # и поскольку объект Group в отдельном файле group, вначале этого файла делается импорт
    app.create_group(Group(name = "группа 2" ,header ="444",footer ="555"))
    app.session.logout() # ↑ добавлен session потомучто функция раскрыта в помощнике session

  # ВТОРОЙ СЦЕНАРИЙ (из сгруппированых методов) с пустыми значениями в create_group
def test_add_empty_group(app):
    app.session.login(username="admin", password="secret") # login это метод ( в скобках параметры этого метода)
    app.create_group(Group(name="", header="", footer=""))
    app.session.logout()


  
