<?xml version="1.0" encoding="UTF-8"?><testrun duration="1615" footerText="Generated by PyCharm on 25.03.2024, 22:37" name="pytest in test">
    <count name="total" value="3"/>
    <count name="failed" value="2"/>
    <count name="passed" value="1"/>
    <config nameIsGenerated="true" configId="tests" name="pytest in test">
        <module name="Python_training1"/>
        <option name="ENV_FILES" value=""/>
        <option name="INTERPRETER_OPTIONS" value=""/>
        <option name="PARENT_ENVS" value="true"/>
        <option name="SDK_HOME" value=""/>
        <option name="WORKING_DIRECTORY" value="C:/DEVEL/Python_training1/test"/>
        <option name="IS_MODULE_SDK" value="true"/>
        <option name="ADD_CONTENT_ROOTS" value="true"/>
        <option name="ADD_SOURCE_ROOTS" value="true"/>
        <option name="_new_keywords" value="&quot;&quot;"/>
        <option name="_new_parameters" value="&quot;&quot;"/>
        <option name="_new_additionalArguments" value="&quot;&quot;"/>
        <option name="_new_target" value="&quot;C:/DEVEL/Python_training1/test&quot;"/>
        <option name="_new_targetType" value="&quot;PATH&quot;"/>
        <method v="2"/>
    </config>
    <suite duration="1551" locationUrl="python&lt;C:\DEVEL\Python_training1\test&gt;://test_add_group" name="test_add_group" status="failed">
        <test duration="1500" locationUrl="python&lt;C:\DEVEL\Python_training1\test&gt;://test_add_group.test_add_group" name="test_add_group" metainfo="test_add_group" status="passed">
            <output type="stdout">PASSED                                 [ 33%]
</output>
        </test>
        <test duration="51" locationUrl="python&lt;C:\DEVEL\Python_training1\test&gt;://test_add_group.test_add_empty_group" name="test_add_empty_group" metainfo="test_add_empty_group" status="failed">
            <output type="stdout">FAILED                           [ 66%]
</output>
            <output type="stderr">test_add_group.py:26 (test_add_empty_group)app = &lt;fixture.application.Application object at 0x000001E50E857A70&gt;
    def test_add_empty_group(app):
&gt;       app.session.login(username="admin", password="secret") # login это метод ( в скобках параметры этого метода)
test_add_group.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\fixture\session.py:15: in login
    self.driver.find_element(By.NAME, "user").click()
..\.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:741: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
..\.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:347: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E50E855DC0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"Unable to locate element: [name=\\"user\\"]",.../content/shared/webdriver/Errors.sys.mjs:510:5\\ndom.find/&lt;/&lt;@chrome://remote/content/shared/DOM.sys.mjs:136:16\\n"}}'}
    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: [name="user"]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5
E       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:510:5
E       dom.find/&lt;/&lt;@chrome://remote/content/shared/DOM.sys.mjs:136:16
..\.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:229: NoSuchElementException
</output>
        </test>
    </suite>
    <suite duration="64" locationUrl="python&lt;C:\DEVEL\Python_training1\test&gt;://test_del_group" name="test_del_group" status="failed">
        <test duration="64" locationUrl="python&lt;C:\DEVEL\Python_training1\test&gt;://test_del_group.test_delete_first_group" name="test_delete_first_group" metainfo="test_delete_first_group" status="failed">
            <output type="stdout">FAILED                        [100%]
</output>
            <output type="stderr">test_del_group.py:1 (test_delete_first_group)app = &lt;fixture.application.Application object at 0x000001E50E857A70&gt;
    def test_delete_first_group(app): # это объект созданый фикстурой
        # ↓ в методе передаются явные значения параметров username и password
        # эти параметры были созданы в несгруппированных методах, конкретно в login
        # добавляется app т.к. эты функция  обращается к функции application
&gt;       app.session.login(username ="admin",password ="secret")
test_del_group.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\fixture\session.py:15: in login
    self.driver.find_element(By.NAME, "user").click()
..\.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:741: in find_element
    return self.execute(Command.FIND_ELEMENT, {"using": by, "value": value})["value"]
..\.venv\Lib\site-packages\selenium\webdriver\remote\webdriver.py:347: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E50E855DC0&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"Unable to locate element: [name=\\"user\\"]",.../content/shared/webdriver/Errors.sys.mjs:510:5\\ndom.find/&lt;/&lt;@chrome://remote/content/shared/DOM.sys.mjs:136:16\\n"}}'}
    def check_response(self, response: Dict[str, Any]) -&gt; None:
        """Checks that a JSON response from the WebDriver does not have an
        error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get("status", None)
        if not status or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen: str = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get("value", None)
            if value_json and isinstance(value_json, str):
                import json
    
                try:
                    value = json.loads(value_json)
                    if len(value) == 1:
                        value = value["value"]
                    status = value.get("error", None)
                    if not status:
                        status = value.get("status", ErrorCode.UNKNOWN_ERROR)
                        message = value.get("value") or value.get("message")
                        if not isinstance(message, str):
                            value = message
                            message = message.get("message")
                    else:
                        message = value.get("message", None)
                except ValueError:
                    pass
    
        exception_class: Type[WebDriverException]
        e = ErrorCode()
        error_codes = [item for item in dir(e) if not item.startswith("__")]
        for error_code in error_codes:
            error_info = getattr(ErrorCode, error_code)
            if isinstance(error_info, list) and status in error_info:
                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)
                break
        else:
            exception_class = WebDriverException
    
        if not value:
            value = response["value"]
        if isinstance(value, str):
            raise exception_class(value)
        if message == "" and "message" in value:
            message = value["message"]
    
        screen = None  # type: ignore[assignment]
        if "screen" in value:
            screen = value["screen"]
    
        stacktrace = None
        st_value = value.get("stackTrace") or value.get("stacktrace")
        if st_value:
            if isinstance(st_value, str):
                stacktrace = st_value.split("\n")
            else:
                stacktrace = []
                try:
                    for frame in st_value:
                        line = frame.get("lineNumber", "")
                        file = frame.get("fileName", "&lt;anonymous&gt;")
                        if line:
                            file = f"{file}:{line}"
                        meth = frame.get("methodName", "&lt;anonymous&gt;")
                        if "className" in frame:
                            meth = f"{frame['className']}.{meth}"
                        msg = "    at %s (%s)"
                        msg = msg % (meth, file)
                        stacktrace.append(msg)
                except TypeError:
                    pass
        if exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if "data" in value:
                alert_text = value["data"].get("text")
            elif "alert" in value:
                alert_text = value["alert"].get("text")
            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: Unable to locate element: [name="user"]; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#no-such-element-exception
E       Stacktrace:
E       RemoteError@chrome://remote/content/shared/RemoteError.sys.mjs:8:8
E       WebDriverError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:192:5
E       NoSuchElementError@chrome://remote/content/shared/webdriver/Errors.sys.mjs:510:5
E       dom.find/&lt;/&lt;@chrome://remote/content/shared/DOM.sys.mjs:136:16
..\.venv\Lib\site-packages\selenium\webdriver\remote\errorhandler.py:229: NoSuchElementException
</output>
        </test>
    </suite>
</testrun>
